import React, { useEffect, useState } from 'react';
import {
  StyleSheet,
  View,
  Platform,
} from 'react-native';
import { useForm, useWatch } from 'react-hook-form';
import { showMessage } from 'react-native-flash-message';
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';

import CustomButton from '../../components/CustomButton';
import CustomHeader from '../../components/CustomHeader';
import CustomInput from '../../components/CustomInput';
import CustomDropdown from '../../components/CustomDropdown';
import CustomDatePicker from '../../components/CustomDatePicker';
import WrapperContainer from '../../components/WrapperContainer';
import { Colors } from '../../constants/colors';
import { goBack } from '../../utils/navigationRef';
import { createSale } from '../../services/salesApi';

type SaleForm = {
  customerId: string;
  employeeId: string;
  date: Date;
  productName: string;
  uom: string;
  quantity: string;
  price: string;
  paidAmount: string;
  totalPrice: string;
  dueAmount: string;
  notes?: string;
};

const CreateSaleScreen: React.FC = () => {
  const [loading, setLoading] = useState(false);

  const {
    control,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm<SaleForm>({
    defaultValues: {
      customerId: '',
      employeeId: '',
      date: new Date(),
      productName: '',
      uom: '',
      quantity: '',
      price: '',
      paidAmount: '',
      totalPrice: '',
      dueAmount: '',
      notes: '',
    },
  });

  // ЁЯФ╣ Watch values for calculation
  const price = useWatch({ control, name: 'price' });
  const quantity = useWatch({ control, name: 'quantity' });
  const paidAmount = useWatch({ control, name: 'paidAmount' });

  // ЁЯФ╣ Auto-calculate total & due
  useEffect(() => {
    const total = (Number(price) || 0) * (Number(quantity) || 0);
    const due = total - (Number(paidAmount) || 0);
    setValue('totalPrice', total.toString());
    setValue('dueAmount', due.toString());
  }, [price, quantity, paidAmount, setValue]);

  const onSubmit = async (data: SaleForm) => {
    try {
      setLoading(true);

      const payload = {
        customerId: data.customerId,
        employeeId: data.employeeId,
        date: data.date,
        productName: data.productName,
        uom: data.uom,
        quantity: Number(data.quantity),
        price: Number(data.price),
        paidAmount: Number(data.paidAmount) || 0,
        notes: data.notes,
      };

      const res = await createSale(payload);

      if (res?.status === 201) {
        showMessage({
          message: 'ржмрж┐ржХрзНрж░ржпрж╝ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ тЬЕ',
          type: 'success',
          icon: 'success',
          duration: 2000,
          floating: true,
          onHide: () => goBack(),
        });
      } else {
        showMessage({
          message: res?.message || 'ржмрж┐ржХрзНрж░ржпрж╝ рж╕ржВрж░ржХрзНрж╖ржг ржмрзНржпрж░рзНрже тЭМ',
          type: 'danger',
          icon: 'danger',
        });
      }
    } catch (error: any) {
      console.error('Error creating sale:', error);
      showMessage({
        message: error?.message || 'ржмрж┐ржХрзНрж░ржпрж╝ рж╕ржВрж░ржХрзНрж╖ржг ржмрзНржпрж░рзНрже тЭМ',
        type: 'danger',
        icon: 'danger',
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <WrapperContainer style={{ backgroundColor: Colors.background }}>
      <CustomHeader
        title="ржирждрзБржи ржмрж┐ржХрзНрж░ржпрж╝ рждрзИрж░рж┐ ржХрж░рзБржи"
        leftIconName="arrow-back"
        onLeftPress={() => goBack()}
      />

      <KeyboardAwareScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.contentContainer}
        keyboardShouldPersistTaps="handled"
        enableOnAndroid
        extraHeight={Platform.OS === 'ios' ? 150 : 200}
        extraScrollHeight={Platform.OS === 'ios' ? 120 : 150}
        enableAutomaticScroll
        showsVerticalScrollIndicator={false}
      >
        {/* ЁЯФ╣ Customer */}
        <CustomDropdown
          label="ржХрж╛рж╕рзНржЯржорж╛рж░"
          name="customerId"
          control={control}
          items={[
            { label: 'ржХрж╛рж╕рзНржЯржорж╛рж░ рзз', value: 'cust1' },
            { label: 'ржХрж╛рж╕рзНржЯржорж╛рж░ рзи', value: 'cust2' },
          ]}
          rules={{ required: 'ржХрж╛рж╕рзНржЯржорж╛рж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи' }}
          error={errors.customerId}
        />

        {/* ЁЯФ╣ Employee */}
        <CustomDropdown
          label="ржХрж░рзНржоржЪрж╛рж░рзА"
          name="employeeId"
          control={control}
          items={[
            { label: 'ржПржоржкрзНрж▓ржпрж╝рж┐ рзз', value: 'emp1' },
            { label: 'ржПржоржкрзНрж▓ржпрж╝рж┐ рзи', value: 'emp2' },
          ]}
          rules={{ required: 'ржХрж░рзНржоржЪрж╛рж░рзА ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи' }}
          error={errors.employeeId}
        />

        {/* ЁЯФ╣ Date */}
        <CustomDatePicker
          label="рждрж╛рж░рж┐ржЦ"
          name="date"
          control={control}
          rules={{ required: 'рждрж╛рж░рж┐ржЦ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи' }}
          errorStyle={{ color: Colors.error }}
        />

        {/* ЁЯФ╣ Product Name (disabled) */}
        <CustomInput
          label="ржкржгрзНржпрзЗрж░ ржирж╛ржо"
          control={control}
          name="productName"
          disabled
          error={errors.productName}
        />

        {/* ЁЯФ╣ UOM (disabled) */}
        <CustomInput
          label="ржПржХржХ (UOM)"
          control={control}
          name="uom"
          disabled
          error={errors.uom}
        />

        {/* ЁЯФ╣ Price & Quantity */}
        <View style={styles.row}>
          <View style={styles.halfInput}>
            <CustomInput
              label="ржжрж╛ржо"
              control={control}
              name="price"
              keyboardType="numeric"
              rules={{ required: 'ржжрж╛ржо ржЖржмрж╢рзНржпржХ' }}
              error={errors.price}
            />
          </View>
          <View style={styles.halfInput}>
            <CustomInput
              label="ржкрж░рж┐ржорж╛ржг"
              control={control}
              name="quantity"
              keyboardType="numeric"
              rules={{ required: 'ржкрж░рж┐ржорж╛ржг ржЖржмрж╢рзНржпржХ' }}
              error={errors.quantity}
            />
          </View>
        </View>

        {/* ЁЯФ╣ Paid Amount */}
        <CustomInput
          label="ржкрзНрж░ржжрждрзНржд ржЯрж╛ржХрж╛"
          control={control}
          name="paidAmount"
          keyboardType="numeric"
          error={errors.paidAmount}
        />

        {/* ЁЯФ╣ Total Price (disabled) */}
        <CustomInput
          label="ржорзЛржЯ ржжрж╛ржо"
          control={control}
          name="totalPrice"
          disabled
        />

        {/* ЁЯФ╣ Due Amount (disabled) */}
        <CustomInput
          label="ржмрж╛ржХрж┐ ржЯрж╛ржХрж╛"
          control={control}
          name="dueAmount"
          disabled
        />

        {/* ЁЯФ╣ Notes */}
        <CustomInput
          label="ржирзЛржЯ"
          control={control}
          name="notes"
          multiline
          placeholder="ржЕрждрж┐рж░рж┐ржХрзНржд ржирзЛржЯ рж▓рж┐ржЦрзБржи"
        />

        <CustomButton
          loading={loading}
          title="рж╕рж╛ржмржорж┐ржЯ ржХрж░рзБржи"
          onPress={handleSubmit(onSubmit)}
          style={styles.submitButton}
        />

        <View style={{ height: 100 }} />
      </KeyboardAwareScrollView>
    </WrapperContainer>
  );
};

export default CreateSaleScreen;

const styles = StyleSheet.create({
  scrollView: { flex: 1 },
  contentContainer: { flexGrow: 1, padding: 16 },
  row: { flexDirection: 'row', justifyContent: 'space-between', gap: 10 },
  halfInput: { flex: 1 },
  submitButton: { marginTop: 30, borderRadius: 10, paddingVertical: 16 },
});
