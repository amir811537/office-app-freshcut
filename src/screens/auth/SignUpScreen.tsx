import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
} from 'react-native';
import { useForm } from 'react-hook-form';
import Ionicons from 'react-native-vector-icons/Ionicons';
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';

import { Colors } from '../../constants/colors';
import CustomInput from '../../components/CustomInput';
import CustomButton from '../../components/CustomButton';
import { goBack, navigate } from '../../utils/navigationRef';
import WrapperContainer from '../../components/WrapperContainer';
import CustomHeader from '../../components/CustomHeader';

type SignUpForm = {
  fullName: string;
  userName: string;
  email: string;
  phone: string;
  employeeCode: string;
  password: string;
  confirmPassword: string;
};

const SignUpScreen: React.FC = () => {
  const { control, handleSubmit, watch, formState: { errors } } = useForm<SignUpForm>({
    defaultValues: {
      fullName: '',
      userName: '',
      email: '',
      phone: '',
      employeeCode: '',
      password: '',
      confirmPassword: '',
    },
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const onSubmit = (data: SignUpForm) => {
    console.log('SignUp Data:', data);
    // üî• API later
  };

  const password = watch('password');

  return (
    <WrapperContainer style={{ backgroundColor: Colors.background }}>
      <CustomHeader
        title="‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü"
        leftIconName="arrow-back"
        onLeftPress={() => goBack()}
      />

      <KeyboardAwareScrollView
        style={{ flex: 1, backgroundColor: Colors.background }}
        contentContainerStyle={styles.container}
        enableOnAndroid
        extraScrollHeight={80}
      >
     
        {/* Full Name */}
        <CustomInput
          label="‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ"
          placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
          control={control}
          name="fullName"
          rules={{ required: '‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï' }}
          error={errors.fullName}
        />

        {/* Username */}
        <CustomInput
          label="‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ"
          placeholder="‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
          control={control}
          name="userName"
          rules={{ required: '‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï' }}
          error={errors.userName}
        />

        {/* Email */}
        <CustomInput
          label="‡¶á‡¶Æ‡ßá‡¶á‡¶≤"
          placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
          control={control}
          name="email"
          keyboardType="email-address"
          autoCapitalize="none"
          rules={{
            required: '‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï',
            pattern: {
              value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
              message: '‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®',
            },
          }}
          error={errors.email}
        />

        {/* Phone */}
        <CustomInput
          label="‡¶´‡ßã‡¶®"
          placeholder="‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
          control={control}
          name="phone"
          keyboardType="phone-pad"
          rules={{
            required: '‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï',
            minLength: { value: 11, message: '‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®' },
          }}
          error={errors.phone}
        />

        {/* Employee Code */}
        <CustomInput
          label="‡¶ï‡¶∞‡ßç‡¶Æ‡¶ö‡¶æ‡¶∞‡ßÄ ‡¶ï‡ßã‡¶°"
          placeholder="‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
          control={control}
          name="employeeCode"
          rules={{ required: '‡¶ï‡¶∞‡ßç‡¶Æ‡¶ö‡¶æ‡¶∞‡ßÄ ‡¶ï‡ßã‡¶° ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï' }}
          error={errors.employeeCode}
        />

        {/* Password */}
        <CustomInput
          label="‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°"
          placeholder="‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
          control={control}
          name="password"
          secureTextEntry={!showPassword}
          rules={{
            required: '‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï',
            minLength: { value: 4, message: '‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá 4 ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞' },
          }}
          error={errors.password}
          rightIcon={
            <Ionicons
              name={showPassword ? 'eye-off-outline' : 'eye-outline'}
              size={20}
              color={Colors.lightText}
            />
          }
          onRightIconPress={() => setShowPassword(!showPassword)}
        />

        {/* Confirm Password */}
        <CustomInput
          label="‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®"
          placeholder="‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
          control={control}
          name="confirmPassword"
          secureTextEntry={!showConfirmPassword}
          rules={{
            required: '‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï',
            validate: (value) => value === password || '‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡¶ø‡¶≤‡¶õ‡ßá ‡¶®‡¶æ',
          }}
          error={errors.confirmPassword}
          rightIcon={
            <Ionicons
              name={showConfirmPassword ? 'eye-off-outline' : 'eye-outline'}
              size={20}
              color={Colors.lightText}
            />
          }
          onRightIconPress={() => setShowConfirmPassword(!showConfirmPassword)}
        />

        {/* Sign Up Button */}
        <CustomButton
          title="‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®"
          onPress={handleSubmit(onSubmit)}
          style={styles.signupButton}
        />

        {/* Already have account */}
        <View style={styles.loginWrapper}>
          <Text style={styles.loginText}>‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá?</Text>
          <TouchableOpacity onPress={() => navigate('LoginScreen')}>
            <Text style={styles.loginLink}> ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</Text>
          </TouchableOpacity>
        </View>
      </KeyboardAwareScrollView>
    </WrapperContainer>
  );
};

export default SignUpScreen;

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    justifyContent: 'center',
    paddingHorizontal: 20,
    paddingVertical: 20,
    backgroundColor: Colors.background,
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 20,
  },
  title: {
    fontSize: 22,
    fontWeight: '700',
    color: Colors.text,
  },
  subtitle: {
    fontSize: 14,
    color: Colors.lightText,
    marginTop: 4,
    marginBottom: 20,
  },
  signupButton: {
    borderRadius: 12,
    marginTop: 20,
    paddingVertical: 16,
  },
  loginWrapper: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 25,
  },
  loginText: {
    fontSize: 14,
    color: Colors.text,
  },
  loginLink: {
    fontSize: 14,
    fontWeight: '600',
    color: Colors.theme,
  },
});
